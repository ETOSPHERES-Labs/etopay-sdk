name: CI

on:
  push:

permissions:
  contents: read # Only for private repositories
  issues: read # Only for private repositories
  checks: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  # Disable incremental compilation for faster from-scratch builds
  CARGO_INCREMENTAL: 0

# cancel the job if a newer pipeline starts for the same MR or branch
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Check format
        run: cargo fmt --check

  unused-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-machete
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-machete

      - name: Check for unused dependencies
        run: cargo machete

  audit-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit

      - name: Audit dependencies
        run: cargo audit --color always

  cargo-deny:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-deny
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-deny

      - name: Audit dependencies
        run: cargo deny --all-features check

  lint-clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "21.12"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for clippy warnings
        run: cargo clippy --all-targets --all-features --color always -- -D warnings

  unit-tests:
    runs-on: ubuntu-latest
    env:
      VIVISWAP_ENV: testing
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "21.12"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov

      - name: Install nextest
        run: curl -LsSf https://get.nexte.st/latest/linux | tar zxf - -C ${CARGO_HOME:-~/.cargo}/bin

      - name: Run unit tests
        run: make unit-tests

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: ${{ github.workspace }}/target/nextest/ci/junit.xml

  unit-tests-coverage:
    runs-on: ubuntu-latest
    env:
      VIVISWAP_ENV: testing
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "21.12"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov

      - name: Install nextest
        run: curl -LsSf https://get.nexte.st/latest/linux | tar zxf - -C ${CARGO_HOME:-~/.cargo}/bin

      - name: Run unit tests with coverage
        run: cargo llvm-cov nextest --profile ci --locked --lib --workspace --no-fail-fast --all-features --cobertura --output-path cobertura.xml --exclude etopay-sdk-jni --exclude etopay-sdk-swift --exclude etopay-sdk-wasm --ignore-filename-regex "bindings/|api_types/|.*/error\.rs"

      - name: Publish Coverage
        uses: 5monkeys/cobertura-action@master
        with:
          path: cobertura.xml
          minimum_coverage: 75

  build-sdk-wasm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      - uses: Swatinem/rust-cache@v2
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "21.12"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Use Node.js v20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          # cache: 'pnpm'

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build wasm sdk for nodejs
        run: |
          cd bindings/wasm
          wasm-pack build --release --scope etopay --target nodejs --out-dir out/web/pkg
          wasm-pack pack out/web
          cd examples/webapp
          echo -e "RUST_LOG=info\nTRACING_ENV=dev" > ../.env
          wasm-pack build --release --scope eto --no-opt
          pnpm install
          pnpm build

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: etopay-sdk-wasm
          path: bindings/wasm/out/**/*.tgz
          if-no-files-found: error
          retention-days: 7
          overwrite: true

  compile-wasm-examples:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      - uses: Swatinem/rust-cache@v2
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "21.12"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Use Node.js v20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build wasm sdk for nodejs
        run: |
          cd bindings/wasm
          wasm-pack build --scope eto --target nodejs --no-opt
          pnpm install
          # run tsc with a list of all ts files as an argument
          find examples/ -name "*.ts" -exec tsc --noEmit {} +

  build-sdk-swift:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin,x86_64-apple-darwin

      - uses: Swatinem/rust-cache@v2
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "21.12"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - uses: swift-actions/setup-swift@v2
        with:
          swift-version: "6.0.1"

      - name: Build swift sdk
        run: |
          cd bindings/swift
          make compile_swift_main

      - name: Build XCFramework for Mac
        run: |
          cd bindings/swift
          make xcframework_mac

      - name: Compile Swift Examples
        run: |
          cd bindings/swift/examples
          xcrun swift build

  android-bindings-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "21.12"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: "23"
          distribution: "zulu"

      - name: Run android bindings tests
        run: cd bindings/android/tests && gradle test

  jnigen-integration-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "21.12"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run jnigen integration test
        run: cd tools/jnigen-integration-test && gradle test
