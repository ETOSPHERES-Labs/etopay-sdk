name: Publish Wiki to GitHub Pages

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Tag name for release"
        required: true
  push:
    branches:
      - main
    tags:
      - v[0-9]+.[0-9]+.[0-9]+(-rc.+)?
  pull_request:
    paths:
      - ".github/workflows/github-pages.yml"
      - "docs/**/*"
      - "sdk/examples/**/*"
      - "bindings/**/*"
      - "sdk/src/**/*"

jobs:
  public-wiki:
    runs-on: ubuntu-latest

    env:
      GIT_DEPTH: 1000
      DEPLOY_ONLY: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')) || github.event_name == 'workflow_dispatch' }}

    steps:
      # take TAG_NAME from input variable
      - if: github.event_name == 'workflow_dispatch'
        run: echo "TAG_NAME=${{ github.event.inputs.tag_name }}" | tee -a $GITHUB_ENV

      # if this run is the push to main, it is the 'nightly' release
      - if: (github.event_name == 'push' && github.event.ref == 'refs/heads/main' ) || github.event_name == 'pull_request'
        run: echo 'TAG_NAME=latest' | tee -a $GITHUB_ENV

        # if this run is not the push to main it is a tag, take the tag value
      - if: github.event_name == 'push' && github.event.ref != 'refs/heads/main'
        run: |
          TAG_NAME=${{ github.ref }}
          echo "TAG_NAME=${TAG_NAME#refs/tags/}" | tee -a $GITHUB_ENV

      - name: Tag Name
        run: echo ${TAG_NAME}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ env.GIT_DEPTH }}

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      - uses: Swatinem/rust-cache@v2
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "21.12"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Use Node.js v20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Setup Python environment
        shell: bash
        working-directory: docs
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          pip install mkdocs-material mike mkdocs-git-revision-date-localized-plugin \
                      mkdocs-git-committers-plugin-2 mkdocs-git-authors-plugin mkdocs-typedoc
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH  # Ensure mkdocs is available globally

      - name: Install project dependencies with pnpm
        shell: bash
        working-directory: docs
        run: pnpm install

      - name: Build wasm-bindings
        shell: bash
        working-directory: bindings/wasm
        run: wasm-pack build --dev --scope etospheres

      - name: Build Rust docs
        shell: bash
        working-directory: sdk
        run: |
          cargo doc --no-deps --all-features --lib
          mkdir -p ../docs/docs/rust-docs/doc/
          mv ../target/doc/* ../docs/docs/rust-docs/doc/

      - name: Build Java docs
        shell: bash
        working-directory: bindings/android
        run: |
          cargo build
          make build_javadoc
          mv javadoc ../../docs/docs/

      - name: Mark repository as safe for Git
        shell: bash
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Fetch the gh-pages branch
        shell: bash
        run: git fetch origin gh-pages

      - name: Deploy to GitHub Pages
        if: env.DEPLOY_ONLY == 'true'
        working-directory: docs
        run: mike deploy -p ${TAG_NAME}
        env:
          GIT_COMMITTER_NAME: ci-bot
          GIT_COMMITTER_EMAIL: ci-bot@etospheres.com
