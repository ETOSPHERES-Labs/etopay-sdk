ext {
    junitVersion = project.hasProperty('junitVersion') ? rootProject.ext.junitVersion : '4.13.2'
    logbackVersion = project.hasProperty('logbackVersion') ? rootProject.ext.logbackVersion : '1.2.6'
    wiremockVersion = project.hasProperty('wiremockVersion') ? rootProject.ext.wiremockVersion : '2.35.0'
    assertjVersion = project.hasProperty('assertjVersion') ? rootProject.ext.assertjVersion : '3.24.2'
    jacksonVersion = project.hasProperty('jacksonVersion') ? rootProject.ext.jacksonVersion : '2.15.2'
    slf4jVersion = project.hasProperty('slf4jVersion') ? rootProject.ext.slf4jVersion : '1.7.32'
}

buildscript {
    repositories {
        mavenCentral()
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'java'

sourceCompatibility = JavaVersion.VERSION_23
targetCompatibility = JavaVersion.VERSION_23

dependencies {
    implementation "ch.qos.logback:logback-classic:$logbackVersion" // Example for Logback
    testImplementation "junit:junit:$junitVersion"
    testImplementation "com.github.tomakehurst:wiremock-jre8:$wiremockVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"

    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'
}

task compileNativeReleaseLibrary(type: Exec) {
    workingDir '../'
    commandLine 'cargo', 'build', '--release', '--locked'
    
    // always rerun this task
    outputs.upToDateWhen { false }
}

tasks.withType(Test) {
    // first, we need the compiled binary to run the test
    dependsOn "compileNativeReleaseLibrary"

    // depend on the file so that the tests rerun if the native lib changed
    inputs.file(file('../../../target/release/libetopaysdk.so'))

    // then we can point the library path to the cargo output directory (relative to the project root)
    systemProperty "java.library.path", file("../../../target/release/")
}

tasks.withType(JavaCompile) {
    // show more information about deprecation warnings during compilation
    options.deprecation = true

    // depend on the generated file so that we recompile if it changed
    inputs.file(file('src/main/java/com/etospheres/etopay/ETOPaySdk.java'))

    // since we need java to compile the generated bindings, we need to depend on the build task, and make sure we run after it
    dependsOn "compileNativeReleaseLibrary"
    mustRunAfter "compileNativeReleaseLibrary"
}

// Examples

apply plugin: 'application'

task runCreateNewUser01(type: JavaExec) {
    group = 'application'
    main = 'com.etospheres.etopay.examples.CreateNewUser01'
    classpath = sourceSets.main.runtimeClasspath
    dependsOn compileNativeReleaseLibrary

    systemProperty "java.library.path", file("../../../../target/release/")
}

task runCreateNewWallet03(type: JavaExec) {
    group = 'application'
    main = 'com.etospheres.etopay.examples.CreateNewWallet03'
    classpath = sourceSets.main.runtimeClasspath
    dependsOn compileNativeReleaseLibrary

    systemProperty "java.library.path", file("../../../../target/release/")
}

task runMigrateWalletFromMnemonic04(type: JavaExec) {
    group = 'application'
    main = 'com.etospheres.etopay.examples.MigrateWalletFromMnemonic04'
    classpath = sourceSets.main.runtimeClasspath
    dependsOn compileNativeReleaseLibrary

    systemProperty "java.library.path", file("../../../../target/release/")
}

task runMigrateWalletFromBackup05(type: JavaExec) {
    group = 'application'
    main = 'com.etospheres.etopay.examples.MigrateWalletFromBackup05'
    classpath = sourceSets.main.runtimeClasspath
    dependsOn compileNativeReleaseLibrary

    systemProperty "java.library.path", file("../../../../target/release/")
}

task runGenerateNewAddress06(type: JavaExec) {
    group = 'application'
    main = 'com.etospheres.etopay.examples.GenerateNewAddress06'
    classpath = sourceSets.main.runtimeClasspath
    dependsOn compileNativeReleaseLibrary

    systemProperty "java.library.path", file("../../../../target/release/")
}

task runGetBalance07(type: JavaExec) {
    group = 'application'
    main = 'com.etospheres.etopay.examples.GetBalance07'
    classpath = sourceSets.main.runtimeClasspath
    dependsOn compileNativeReleaseLibrary

    systemProperty "java.library.path", file("../../../../target/release/")
}

task runCreatePurchaseRequest08(type: JavaExec) {
    group = 'application'
    main = 'com.etospheres.etopay.examples.CreatePurchaseRequest08'
    classpath = sourceSets.main.runtimeClasspath
    dependsOn compileNativeReleaseLibrary

    systemProperty "java.library.path", file("../../../../target/release/")
}

task runVerifyPin10(type: JavaExec) {
    group = 'application'
    main = 'com.etospheres.etopay.examples.VerifyPin10'
    classpath = sourceSets.main.runtimeClasspath
    dependsOn compileNativeReleaseLibrary

    systemProperty "java.library.path", file("../../../../target/release/")
}

task runResetPin11(type: JavaExec) {
    group = 'application'
    main = 'com.etospheres.etopay.examples.ResetPin11'
    classpath = sourceSets.main.runtimeClasspath
    dependsOn compileNativeReleaseLibrary

    systemProperty "java.library.path", file("../../../../target/release/")
}

task runChangePassword12(type: JavaExec) {
    group = 'application'
    main = 'com.etospheres.etopay.examples.ChangePassword12'
    classpath = sourceSets.main.runtimeClasspath
    dependsOn compileNativeReleaseLibrary

    systemProperty "java.library.path", file("../../../../target/release/")
}

task runSendAmount13(type: JavaExec) {
    group = 'application'
    main = 'com.etospheres.etopay.examples.SendAmount13'
    classpath = sourceSets.main.runtimeClasspath
    dependsOn compileNativeReleaseLibrary

    systemProperty "java.library.path", file("../../../../target/release/")
}

task runGetExchangeRate14(type: JavaExec) {
    group = 'application'
    main = 'com.etospheres.etopay.examples.GetExchangeRate14'
    classpath = sourceSets.main.runtimeClasspath
    dependsOn compileNativeReleaseLibrary

    systemProperty "java.library.path", file("../../../../target/release/")
}

task runGetTxList16(type: JavaExec) {
    group = 'application'
    main = 'com.etospheres.etopay.examples.GetTxList16'
    classpath = sourceSets.main.runtimeClasspath
    dependsOn compileNativeReleaseLibrary

    systemProperty "java.library.path", file("../../../../target/release/")
}

task runDeleteUser18(type: JavaExec) {
    group = 'application'
    main = 'com.etospheres.etopay.examples.DeleteUser18'
    classpath = sourceSets.main.runtimeClasspath
    dependsOn compileNativeReleaseLibrary

    systemProperty "java.library.path", file("../../../../target/release/")
}

task runGetWalletTxList19(type: JavaExec) {
    group = 'application'
    main = 'com.etospheres.etopay.examples.GetWalletTxList19'
    classpath = sourceSets.main.runtimeClasspath
    dependsOn compileNativeReleaseLibrary

    systemProperty "java.library.path", file("../../../../target/release/")
}

task runSendCompliment20(type: JavaExec) {
    group = 'application'
    main = 'com.etospheres.etopay.examples.SendCompliment20'
    classpath = sourceSets.main.runtimeClasspath
    dependsOn compileNativeReleaseLibrary

    systemProperty "java.library.path", file("../../../../target/release/")
}

// examples that do not work 

task runOnboardUserPostident02 (type: JavaExec) {
    group = 'application'
    main = 'com.etospheres.etopay.examples.OnboardUserPostident02'
    classpath = sourceSets.main.runtimeClasspath
    dependsOn compileNativeReleaseLibrary

    systemProperty "java.library.path", file("../../../../target/release/")
}

task runOnboardUserViviswap09(type: JavaExec) {
    group = 'application'
    main = 'com.etospheres.etopay.examples.OnboardUserViviswap09'
    classpath = sourceSets.main.runtimeClasspath
    dependsOn compileNativeReleaseLibrary

    systemProperty "java.library.path", file("../../../../target/release/")
}

task runAllExamples(dependsOn: [
    'runCreateNewUser01',
    // 'runOnboardUserPostident02', 
    'runCreateNewWallet03',
    'runMigrateWalletFromMnemonic04',
    'runMigrateWalletFromBackup05',
    'runGenerateNewAddress06',
    'runGetBalance07',
    'runCreatePurchaseRequest08',
    // 'runOnboardUserViviswap09',
    'runVerifyPin10',
    'runResetPin11',
    'runChangePassword12',
    'runSendAmount13',
    'runGetExchangeRate14',
    'runGetTxList16',
    'runDeleteUser18',
    'runGetWalletTxList19',
    // 'runSendCompliment20',
]) {
    group = 'application'
    description = 'Runs all main classes (examples) sequentially'
}
